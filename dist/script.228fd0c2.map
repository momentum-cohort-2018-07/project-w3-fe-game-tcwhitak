{"version":3,"sources":["script.js"],"names":["Game","canvas","document","getElementById","screen","getContext","gameSize","x","width","y","height","score","bodies","concat","createInvaders","Player","shootSound","tick","update","draw","window","requestAnimationFrame","notCollidingWithAnything","b1","filter","b2","colliding","length","i","clearRect","drawRect","invader","b","Invader","Math","abs","center","size","body","push","game","color","patrolX","speedX","random","invadersBelow","bullet","Bullet","addBody","invaders","keyboarder","Keyboarder","isDown","KEYS","LEFT","RIGHT","S","load","play","velocity","keyState","addEventListener","e","keyCode","console","log","fillStyle","fillRect","start"],"mappings":"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","file":"script.228fd0c2.map","sourceRoot":"..","sourcesContent":["// Main game object\n// ----------------\n\n// **new Game()** Creates the game object with the game state and logic.\nclass Game {\n  constructor () {\n    // In index.html, there is a canvas tag that the game will be drawn in.\n    // Grab that canvas out of the DOM.\n    const canvas = document.getElementById('space-invaders')\n\n    // Get the drawing context.  This contains functions that const you draw to the canvas.\n    const screen = canvas.getContext('2d')\n\n    // Note down the dimensions of the canvas.  These are used to\n    // place game bodies.\n    const gameSize = { x: canvas.width, y: canvas.height }\n\n    //initial score for game\n    this.score = 0\n\n    // Create the bodies array to hold the player, invaders and bullets.\n    this.bodies = []\n\n    // Add the invaders to the bodies array.\n    this.bodies = this.bodies.concat(createInvaders(this))\n\n    // Add the player to the bodies array.\n    this.bodies = this.bodies.concat(new Player(this, gameSize))\n\n    // In index.html, there is an audio tag that loads the shooting sound.\n    // Get the shoot sound from the DOM and store it on the game object.\n    this.shootSound = document.getElementById('shoot-sound')\n\n    // Main game tick function.  Loops forever, running 60ish times a second.\n    const tick = () => {\n    // Update game state.\n      this.update()\n\n      // Draw game bodies.\n      this.draw(screen, gameSize)\n\n      // Queue up the next call to tick with the browser.\n      window.requestAnimationFrame(tick)\n    }\n\n    // Run the first game tick.  All future calls will be scheduled by\n    // the tick() function itself.\n    this.tick = tick\n  }\n\n  start () {\n    this.tick()\n  }\n\n  // **update()** runs the main game logic.\n  update () {\n    // `notCollidingWithAnything` returns true if passed body\n    // is not colliding with anything.\n    const notCollidingWithAnything = (b1) => {\n      return this.bodies.filter((b2) => { return colliding(b1, b2) }).length === 0\n    }\n\n    // Throw away bodies that are colliding with something. They\n    // will never be updated or draw again.\n    this.bodies = this.bodies.filter(notCollidingWithAnything)\n\n    // Call update on every body.\n    for (let i = 0; i < this.bodies.length; i++) {\n      this.bodies[i].update()\n    }\n  }\n\n  // **draw()** draws the game.\n  draw (screen, gameSize) {\n    // Clear away the drawing from the previous tick.\n    screen.clearRect(0, 0, gameSize.x, gameSize.y)\n\n    // Draw each body as a rectangle.\n    for (let i = 0; i < this.bodies.length; i++) {\n      drawRect(screen, this.bodies[i])\n    }\n  }\n\n  // **invadersBelow()** returns true if `invader` is directly\n  // above at least one other invader.\n  invadersBelow (invader) {\n    // If filtered array is not empty, there are invaders below.\n    return this.bodies.filter(function (b) {\n      // Keep `b` if it is an invader, if it is in the same column\n      // as `invader`, and if it is somewhere below `invader`.\n      return b instanceof Invader &&\n          Math.abs(invader.center.x - b.center.x) < b.size.x &&\n          b.center.y > invader.center.y\n    }).length > 0\n  }\n\n  // **addBody()** adds a body to the bodies array.\n  addBody (body) {\n    this.bodies.push(body)\n  }\n}\n\n// Invaders\n// --------\n\n// **new Invader()** creates an invader.\nclass Invader {\n  constructor (game, center) {\n    this.game = game\n    this.center = center\n    this.size = { x: 15, y: 15 }\n    this.color = 'purple'\n\n    // Invaders patrol from left to right and back again.\n    // `this.patrolX` records the current (relative) position of the\n    // invader in their patrol.  It starts at 0, increases to 40, then\n    // decreases to 0, and so forth.\n    this.patrolX = 0\n\n    // The x speed of the invader.  A positive value moves the invader\n    // right. A negative value moves it left.\n    this.speedX = 0.3\n  }\n\n  // **update()** updates the state of the invader for a single tick.\n  update () {\n    // If the invader is outside the bounds of their patrol...\n    if (this.patrolX < 0 || this.patrolX > 30) {\n      // ... reverse direction of movement.\n      this.speedX = -this.speedX\n    }\n\n    // If coin flip comes up and no friends below in this\n    // invader's column...\n    if (Math.random() > 0.995 &&\n            !this.game.invadersBelow(this)) {\n      // ... create a bullet just below the invader that will move\n      // downward...\n      const bullet = new Bullet({ x: this.center.x, y: this.center.y + this.size.y / 2 },\n        { x: Math.random() - 0.5, y: 2 })\n\n      // ... and add the bullet to the game.\n      this.game.addBody(bullet)\n    }\n\n    // Move according to current x speed.\n    this.center.x += this.speedX\n\n    // Update variable that keeps track of current position in patrol.\n    this.patrolX += this.speedX\n  }\n}\n\n// **createInvaders()** returns an array of twenty-four invaders.\nconst createInvaders = function (game) {\n  const invaders = []\n  for (let i = 0; i < 24; i++) {\n    // Place invaders in eight columns.\n    let x = 30 + (i % 8) * 30\n\n    // Place invaders in three rows.\n    let y = 30 + (i % 3) * 30\n\n    // Create invader.\n    invaders.push(new Invader(game, {x: x, y: y}))\n  }\n\n  return invaders\n}\n\n// Player\n// ------\n\n// **new Player()** creates a player.\nclass Player {\n  constructor (game, gameSize) {\n    this.game = game\n    this.size = { x: 15, y: 15 }\n    this.center = { x: gameSize.x / 2, y: gameSize.y - this.size.y * 2 }\n    this.color = 'green'\n\n    // Create a keyboard object to track button presses.\n    this.keyboarder = new Keyboarder()\n  }\n\n  // **update()** updates the state of the player for a single tick.\n  update () {\n    // If left cursor key is down...\n    if (this.keyboarder.isDown(this.keyboarder.KEYS.LEFT)) {\n      // ... move left.\n      this.center.x -= 2\n    } else if (this.keyboarder.isDown(this.keyboarder.KEYS.RIGHT)) {\n      this.center.x += 2\n    }\n\n    // If S key is down...\n    if (this.keyboarder.isDown(this.keyboarder.KEYS.S)) {\n      // ... create a bullet just above the player that will move upwards...\n      const bullet = new Bullet({ x: this.center.x, y: this.center.y - this.size.y - 10 },\n        { x: 0, y: -7 })\n\n      // ... add the bullet to the game...\n      this.game.addBody(bullet)\n\n      // ... rewind the shoot sound...\n      this.game.shootSound.load()\n\n      // ... and play the shoot sound.\n      this.game.shootSound.play()\n    }\n  }\n}\n\n// Bullet\n// ------\n\n// **new Bullet()** creates a new bullet.\nclass Bullet {\n  constructor (center, velocity) {\n    this.center = center\n    this.size = { x: 3, y: 3 }\n    this.velocity = velocity\n    this.color = 'black'\n  }\n\n  // **update()** updates the state of the bullet for a single tick.\n  update () {\n    // Add velocity to center to move bullet.\n    this.center.x += this.velocity.x\n    this.center.y += this.velocity.y\n  }\n}\n\n// Keyboard input tracking\n// -----------------------\n\n// **new Keyboarder()** creates a new keyboard input tracking object.\nclass Keyboarder {\n  constructor () {\n  // Records up/down state of each key that has ever been pressed.\n    const keyState = {}\n\n    // When key goes down, record that it is down.\n    window.addEventListener('keydown', function (e) {\n      keyState[e.keyCode] = true\n      console.log('key down', e.keyCode)\n    })\n\n    // When key goes up, record that it is up.\n    window.addEventListener('keyup', function (e) {\n      keyState[e.keyCode] = false\n      console.log('key up', e.keyCode)\n    })\n\n    // Returns true if passed key is currently down.  `keyCode` is a\n    // unique number that represents a particular key on the keyboard.\n    this.isDown = function (keyCode) {\n      return keyState[keyCode] === true\n    }\n\n    // Handy constants that give keyCodes human-readable names.\n    this.KEYS = { LEFT: 37, RIGHT: 39, S: 83 }\n  }\n}\n\n// Other functions\n// ---------------\n\n// **drawRect()** draws passed body as a rectangle to `screen`, the drawing context.\nconst drawRect = function (screen, body) {\n  screen.fillStyle = body.color\n  screen.fillRect(body.center.x - body.size.x / 2, body.center.y - body.size.y / 2,\n    body.size.x, body.size.y)\n}\n\n// **colliding()** returns true if two passed bodies are colliding.\n// The approach is to test for five situations.  If any are true,\n// the bodies are definitely not colliding.  If none of them\n// are true, the bodies are colliding.\n// 1. b1 is the same body as b2.\n// 2. Right of `b1` is to the left of the left of `b2`.\n// 3. Bottom of `b1` is above the top of `b2`.\n// 4. Left of `b1` is to the right of the right of `b2`.\n// 5. Top of `b1` is below the bottom of `b2`.\nconst colliding = function (b1, b2) {\n  return !(\n    b1 === b2 ||\n        b1.center.x + b1.size.x / 2 < b2.center.x - b2.size.x / 2 ||\n        b1.center.y + b1.size.y / 2 < b2.center.y - b2.size.y / 2 ||\n        b1.center.x - b1.size.x / 2 > b2.center.x + b2.size.x / 2 ||\n        b1.center.y - b1.size.y / 2 > b2.center.y + b2.size.y / 2\n  )\n}\n\n// Start game\n// ----------\n\n// When the DOM is ready, create (and start) the game.\nwindow.addEventListener('load', function () {\n  let game = new Game()\n  game.start()\n})\n"]}